//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "diagnosticos")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub tecnico_id: Option<i32>,
    pub cliente_id: Option<i32>,
    pub equipo_id: Option<i32>,
    pub fecha_diagnostico: Option<Date>,
    #[sea_orm(column_type = "Text", nullable)]
    pub detalles: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
    pub costo_aprox: Option<Decimal>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::clientes::Entity",
        from = "Column::ClienteId",
        to = "super::clientes::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Clientes,
    #[sea_orm(
        belongs_to = "super::equipos::Entity",
        from = "Column::EquipoId",
        to = "super::equipos::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Equipos,
    #[sea_orm(
        belongs_to = "super::tecnicos::Entity",
        from = "Column::TecnicoId",
        to = "super::tecnicos::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tecnicos,
}

impl Related<super::clientes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Clientes.def()
    }
}

impl Related<super::equipos::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Equipos.def()
    }
}

impl Related<super::tecnicos::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tecnicos.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
